---
title: "Example Single Cell RNA-seq Analysis"
author: "Kazi Tanvir Hasan"
date: "`r Sys.Date()`"
format:
  html:
    self-contained: true
knitr:
  opts_chunk:      ########## set global options ############
    collapse: true # keep code from blocks together (if shown)
    echo: true     # show code
    message: true  # show messages
    warning: true  # show warnings
    error: true    # show error messages
    comment: ""    # don't show ## with printed output
    R.options:    
      digits: 3    # round to three digits
editor: visual
bibliography: [references.bib, packages.bib]
csl: the-new-england-journal-of-medicine.csl
---

```{r}
#| label: tidyverse
#| echo: false

library(conflicted)
library(Seurat)
library(patchwork)
conflict_prefer("filter", "dplyr", quiet = TRUE)
conflict_prefer("lag", "dplyr", quiet = TRUE)

suppressPackageStartupMessages(library(tidyverse))

# suppress "`summarise()` has grouped output by " messages
options(dplyr.summarise.inform=F)

```

This is an example analysis using Seurat package to analyze scRNA-seq data in R. Seurat is a popular package for single-cell RNA sequencing data analysis that provides a wide range of functions for preprocessing, normalization, quality control, clustering, and visualization of scRNA-seq data.

# Import Seurat Object

```{r}
# Load the Seurat dbject dataset
objectSeurat <- readRDS(
  "./data/AD00201.rds"
)
```

# Data QC and Inspection

To perform quality control on the data after importing (or creating) the Seurat object, follow these steps:

1.  Check for cells with too few genes detected. These cells may not have been sequenced deeply enough for reliable characterization. Filter them out.

2.  Check for cells with too many genes detected. These cells may represent doublets or multiplets, where two or more cells are in the same droplet, and therefore share the same cell barcode. Filter them out.

3.  Check for cells with a high mitochondrial transcript percentage. As scRNA-seq experiments use oligo-T to capture mRNAs, mitochondrial transcripts should be relatively under-representative due to their lack of poly-A tails. However, some mitochondrial transcripts may be captured. Cells with high mitochondrial transcript percentages likely represent cells under stress (e.g., hypoxia) that produce a lot of mitochondria or an abnormally high amount of truncated mitochondrial transcripts. Filter them out.

Note that Seurat automatically summarizes the numbers of detected genes when creating the Seurat object (nFeature_RNA) and the number of detected transcripts (nCount_RNA). However, you need to calculate mitochondrial transcript percentages manually. Seurat provides an easy solution.

```{r}
# The [[ operator can add columns to object metadata. 
# This is a great place to stash QC stats
objectSeurat[["percent.mt"]] <- PercentageFeatureSet(
  objectSeurat, pattern = "^MT-"
)
```

When filtering cells based on quality control (QC) metrics, it is important to note that there is no one-size-fits-all filtering criteria. The normal ranges of these metrics can vary dramatically from one experiment to another, depending on sample origin, reagents, and sequencing depths. One suggestion to address this variability is to only filter out outlier cells, which are the minority of cells with certain QC metrics clearly above or below the majority of cells.

To identify these outlier cells, we first need to know how the QC metric values are distributed in the data. We can visualize this distribution using a violin plot for each of the metrics. The violin plot displays the distribution of values for each metric, with the width of the plot showing the density of cells at each value. By creating these plots, we can identify cells that fall far outside the main distribution of values for each metric, indicating that they are likely outliers. These outlier cells can then be filtered out, while retaining the remaining cells for downstream analyses.

```{r}
# Visualize QC metrics as a violin plot
VlnPlot(
  objectSeurat, 
  features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), 
  ncol = 3
)
```

Or if you don't like the dots (individual cells)

```{r}
VlnPlot(
  objectSeurat, 
  features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),
  ncol = 3, 
  pt.size = 0
)
```

Based on our prior knowledge of these metrics, we would expect the number of detected genes and number of detected transcripts to be well correlated, while mitochondrial transcript percentage is not expected to be strongly correlated with the other two metrics.

```{r}
# FeatureScatter is typically used to visualize feature-feature relationships,
# but can be used for anything calculated by the object, i.e. columns in object
# metadata, PC scores etc.

plot1 <- FeatureScatter(
  objectSeurat, 
  feature1 = "nCount_RNA", 
  feature2 = "percent.mt"
)

plot2 <- FeatureScatter(
  objectSeurat, 
  feature1 = "nCount_RNA", 
  feature2 = "nFeature_RNA"
)

plot1 + plot2
```

The R package patchwork was created to simplify the organization of plots generated by ggplot2, which Seurat relies on for its own plotting functions. Without patchwork, attempting to execute plot1 + plot2 would be invalid.

To perform quality control (QC) on our data, we only need to establish a cutoff for one of two metrics: gene count or transcript count. Additionally, we should set an upper threshold for the percentage of mitochondrial transcripts. For this dataset, appropriate parameters could be a gene count between 500 and 5000, and a mitochondrial transcript percentage below 5%, though other thresholds may also be effective.

```{r}
objectSeurat <- subset(
  objectSeurat, 
  subset = nFeature_RNA > 500 & nFeature_RNA < 5000 & percent.mt < 5
)
```

It is important to note that in some cases, additional QC measures may be necessary. One possible concern is the occurrence of doublets, which may not exhibit a higher count of detected genes or transcripts due to variations in captured RNA across cells. To address this, several tools have been developed to identify potential doublets or multiplets. For example, Doublet Finder creates artificial doublets by averaging cells at random and compares each cell to these artificial doublets to determine whether it is more similar to them or not. This approach can help determine whether a cell is likely a doublet. Furthermore, filtering based on mitochondrial transcript percentage alone may not suffice to eliminate unhealthy or stressed cells. In such cases, additional filtering techniques, such as those utilizing machine learning-based predictions, may be necessary.

# Normalization and Data scaling

## Normalization

Similar to bulk RNA-seq, the amount of RNA captured can vary from cell to cell, which means that comparing the number of captured transcripts for each gene directly between cells is not appropriate. To enable the comparison of gene expression levels across different cells, a normalization step is necessary. The most commonly used normalization method in scRNA-seq data analysis is quite similar to TPM (Transcripts Per Million reads). It involves normalizing the feature expression measurements for each cell to the total expression and then multiplying this by a scale factor (typically 10000). Finally, the resulting expression levels are log-transformed to better fit a normal distribution. Notably, before log-transforming the data, a pseudocount is added to each value to ensure that genes with zero transcripts detected in a cell still have values of zero after log-transformation.

```{r}
objectSeurat <- NormalizeData(
  objectSeurat, 
  normalization.method = "LogNormalize"
)
```

## Feature selection

Single-cell RNA sequencing (scRNA-seq) has a significant advantage over bulk RNA-seq as it allows for the identification of cellular heterogeneity by looking for cell groups with distinct molecular signatures. However, not all genes are equally informative or contribute equally to the identification of different cell groups. Genes with low expression levels or those with similar expression levels across all cells may not provide much information and can dilute differences between distinct cell groups. Therefore, before exploring scRNA-seq data further, it is essential to perform a proper feature selection process.

In Seurat and other scRNA-seq data analysis methods, this process involves the identification of highly variable features or genes. These are genes with the most varied expression levels across cells and are used to distinguish different cell groups with distinct molecular signatures.

```{r}
objectSeurat <- FindVariableFeatures(
  objectSeurat, 
  selection.method = "vst", 
  nfeatures = 2000
)
#https://rdrr.io/bioc/DESeq2/man/varianceStabilizingTransformation.html
```

The VST function is used to transform the count data in scRNA-seq data analysis. This transformation aims to make the data approximately homoskedastic, meaning that the variance is constant across the range of mean values. It also normalizes the data with respect to library size. However, the transformation can be sensitive to size factors, which can vary widely. To address this issue, Seurat provides another transformation called rlog, which is less sensitive to size factors. Both transformations can be useful when checking for outliers or when using machine learning techniques such as clustering or linear discriminant analysis.

In Seurat, the VST function is used to identify highly variable features/genes by calculating the standardized variance of each gene across cells and picking the top ones as highly variable features. By default, the top 2000 highly variable features are selected, but this number can be changed using the nfeatures option.

There is no good criteria to determine how many highly variable features to use. The number of highly variable features to use is determined through iteration and observation of the results. Typically, a value between 2000 to 5000 is sufficient and using a different value does not significantly affect the results.

```{r}
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(objectSeurat), 10)

top10
```

```{r}
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(objectSeurat)

plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)

plot1

plot2
```

## Data Scaling

When analyzing single-cell RNA-seq data, it is important to account for differences in gene expression levels and distributions. Without doing so, highly expressed genes would dominate the analysis, potentially obscuring important information from lower expressed genes. To prevent this, a scaling transformation is applied to the data using a set of selected features. This scaling allows for a fairer comparison between genes, ensuring that each gene's contribution to the analysis is given appropriate weight. Scaling is a common technique used across many different data science fields to ensure that all features are given equal consideration.

```{r}
all.genes <- rownames(objectSeurat)
objectSeurat <- ScaleData(objectSeurat, features = all.genes)
```

# Data Clustering (PCA/UMAP)

After identifying highly variable genes and scaling the scRNA-seq data, it is 
strongly recommended to apply linear dimension reduction before conducting 
further analysis. This step has several benefits, including but not limited to:

1.  Compressing the data and making it much more compact, which results in 
faster computation times.

2.  Enhancing signal robustness by summarizing measurements of related features,
which is especially important as scRNA-seq data is intrinsically sparse.

```{r}
objectSeurat <- RunPCA(
  objectSeurat, 
  features = VariableFeatures(object = objectSeurat)
)

# Examine and visualize PCA results a few different ways
print(objectSeurat[["pca"]], dims = 1:2, nfeatures = 5)
```

```{r}
VizDimLoadings(
  objectSeurat, dims = 1:2, 
  nfeatures = 15, 
  reduction = "pca"
)
```

```{r}
DimPlot(objectSeurat, reduction = "pca")

DimHeatmap(objectSeurat, dims = 1, cells = 500, balanced = TRUE)
```

When analyzing scRNA-seq data, it is important to identify the underlying 
systematic patterns of variation, which can be captured by latent variables such
as principal component analysis (PCA) or factor analysis (FA). However, it's not
enough to simply identify these patterns - we also need to test for associations
between observed variables and these latent variables. This is where the 
jackstraw method comes in - it enables us to statistically test for such 
associations, using PCs or other estimates as our latent variables.

```{r}
# NOTE: This process can take a long time for big datasets, comment out for expediency. More
# approximate techniques such as those implemented in ElbowPlot() can be used to reduce
# computation time
objectSeurat <- JackStraw(objectSeurat, num.replicate = 100)

objectSeurat <- ScoreJackStraw(objectSeurat, dims = 1:20)

JackStrawPlot(objectSeurat, dims = 1:15)
```

```{r}
ElbowPlot(objectSeurat)
```

In our analysis, we selected 10 principal components (PCs) to capture the 
systematic variation in the data. However, we recommend users to test downstream
analyses using different numbers of PCs, such as 10, 15, or 50, as we have 
observed that the results do not differ significantly. It is important to note 
that choosing a lower number of PCs, such as 5, can negatively impact the 
downstream analysis results. Hence, we suggest erring on the higher side when 
choosing the number of PCs to be used.

```{r}
objectSeurat <- FindNeighbors(objectSeurat, dims = 1:10)
objectSeurat <- FindClusters(objectSeurat, resolution = 0.5)
```

```{r}
# Look at cluster IDs of the first 5 cells
head(Idents(objectSeurat), 5)
```

When performing linear dimension reduction, there are both advantages and 
disadvantages to consider. One of the benefits is that each Principal Component
(PC) is a linear combination of gene expressions, making the interpretation of 
PCs straightforward. Additionally, the data is compressed without distorting it,
thus preserving most of the information in the data. However, a potential 
drawback is that more than 10 PCs are typically needed to capture most of the
information. While this is generally acceptable for most analyses, it can be 
problematic for visualization since ordinary people can only perceive up to three
dimensions.

Non-linear dimension reduction techniques such as t-distributed Stochastic 
Neighbor Embedding (t-SNE) and Uniform Manifold Approximation and Projection 
(UMAP) are commonly used in scRNA-seq data analysis to address this issue. In 
this example analysis, only the umap method is used.

```{r}
objectSeurat <- RunUMAP(objectSeurat, dims = 1:10)

DimPlot(objectSeurat, reduction = "umap")
```

# Markers Identification

```{r}
# find all markers of cluster 1
cluster1.markers <- FindMarkers(
  objectSeurat, 
  ident.1 = 1, 
  min.pct = 0.25
)

head(cluster1.markers, n = 5)

VlnPlot(
  objectSeurat, 
  features = c(
    row.names(cluster1.markers)[1],
    row.names(cluster1.markers)[2]
  )
)
```

```{r}
# find all markers of cluster 2
cluster2.markers <- FindMarkers(
  objectSeurat, 
  ident.1 = 2,
  min.pct = 0.25
)

head(cluster2.markers, n = 5)

VlnPlot(
  objectSeurat, 
  features = c(
    row.names(cluster2.markers)[1], 
    row.names(cluster2.markers)[2]
  )
)
```

```{r}
# find all markers distinguishing cluster 5 from clusters 0 and 3
cluster5.markers <- FindMarkers(
  objectSeurat, 
  ident.1 = 5, ident.2 = c(0, 3), 
  min.pct = 0.25
)

head(cluster5.markers, n = 5)

VlnPlot(
  objectSeurat, 
  features = c(
    row.names(cluster5.markers)[1], 
    row.names(cluster5.markers)[2]
  )
)
```

```{r}
# find markers for every cluster compared to all remaining cells, report only the positive ones
objectSeurat.markers <- FindAllMarkers(
  objectSeurat,
  only.pos = TRUE, 
  min.pct = 0.25, 
  logfc.threshold = 0.25
)
```

```{r}
x <- objectSeurat.markers %>% 
  group_by(cluster) %>%
  top_n(n = 1, wt = avg_log2FC)

FeaturePlot(objectSeurat, features = x$gene[1:4])

FeaturePlot(objectSeurat, features = x$gene[5:8])
```

```{r}
p <- FeaturePlot(
  objectSeurat,
  features = c(
    "MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ",
    "PPBP", "CD8A"
  ),
  combine = FALSE
)

p <- lapply(X = p, FUN = function(x) x +
              theme(plot.title = element_text(size = 8)) +
              theme(axis.title.y = element_text(size = 5)) +
              theme(axis.title.x = element_text(size = 5)) +
              theme(axis.text.y = element_text(size = 5)) +
              theme(axis.text.x = element_text(size = 5)) +
              theme(legend.position = "none")  )

CombinePlots(plots = p)
```

```{r}
top10 <- objectSeurat.markers %>% 
            group_by(cluster) %>% 
            top_n(n = 10, wt = avg_log2FC)

top10
```

```{r}
p2 <- DoHeatmap(
  objectSeurat,
  features = top10$gene, 
  group.bar.height = 0.01,
  size = 3,
  combine = FALSE
) 

p2 <- lapply(X = p2, FUN = function(x) x + 
               theme(plot.title = element_text(size = 8)) +
               theme(axis.title.y = element_text(size = 5)) +
               theme(axis.title.x = element_text(size = 5)) +
               theme(axis.text.y = element_text(size = 3)) +
               theme(legend.position = "none")  )

CombinePlots(plots = p2)

```

<!-- # Assigning cell type identity to clusters -->

<!-- ```{r} -->

<!-- new.cluster.ids <- c( -->

<!--   "Naive CD4 T", "Memory CD4 T", "CD14+ Mono", "B", "CD8 T", -->

<!--   "FCGR3A+ Mono", "NK", "DC", "Platelet" -->

<!-- ) -->

<!-- names(new.cluster.ids) <- levels(objectSeurat) -->

<!-- objectSeurat <- RenameIdents(objectSeurat, new.cluster.ids) -->

<!-- DimPlot(objectSeurat, reduction = "pca", label = TRUE, pt.size = 0.5) -->

<!-- ``` -->

<!-- ```{r} -->

<!-- objectSeurat -->

<!-- DimPlot( -->

<!--   objectSeurat,  -->

<!--   reduction = "umap",  -->

<!--   label = TRUE, -->

<!--   pt.size = 0.5 -->

<!-- ) -->

<!-- ``` -->

```{r}
sessionInfo()
```
